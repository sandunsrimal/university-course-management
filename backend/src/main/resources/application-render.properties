spring.application.name=backend

# Database configuration for Render with PostgreSQL (auto-detected)
spring.datasource.url=jdbc:postgresql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?sslmode=require&connectTimeout=60&socketTimeout=60&loginTimeout=60
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Enhanced connection pool settings for better resilience
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.initialization-fail-timeout=60000
spring.datasource.hikari.connection-test-query=SELECT 1

# JPA/Hibernate configuration with PostgreSQL (auto-detected)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Database initialization with retry
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true

# Server configuration (Render provides PORT environment variable)
server.port=${PORT:8080}

# JWT Configuration
app.jwt.secret=${JWT_SECRET}
app.jwt.expiration=86400000

# Actuator for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# CORS configuration
spring.web.cors.allowed-origins=https://university-frontend.onrender.com,http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Logging configuration for better debugging
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.postgresql=DEBUG 